AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  ProjectName:
    Type: String
  ComponentName:
    Type: String
  Environment:
    Type: String
    AllowedValues:
      - dev
      - staging
      - prod
  ImageVersion:
    Type: String

Mappings:
  Settings:
    global:
      ContainerPort: 8080
      ServicePriority: 100
  Autoscaling:
    dev:
      MinCapacity: 1
      MaxCapacity: 1
    staging:
      MinCapacity: 1
      MaxCapacity: 1
    prod:
      MinCapacity: 1
      MaxCapacity: 1
  Security:
    dev:
      SecretId: babel/components-data-dev-SdIzbs
    staging:
      SecretId: babel/components-data-staging-Nw9mWq
    prod:
      SecretId: babel/components-data-... #TODO

# Metadata:

Conditions:
  IsProd: !Equals [!Ref Environment, prod]
  EnableAutoscaling:
    !Not [
      !Equals [
        !FindInMap [Autoscaling, !Ref Environment, MinCapacity],
        !FindInMap [Autoscaling, !Ref Environment, MaxCapacity],
      ],
    ]

Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "internauta-service-${Environment}"
      Cpu: 512
      Memory: 512
      NetworkMode: bridge
      RuntimePlatform:
        CpuArchitecture: X86_64 # ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !Ref TaskRole
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      # Volumes: []
      # RequiresCompatibilities:
      ContainerDefinitions:
        - Name: internauta_service
          Image: !Sub
            - "${RepoURI}:${ImageVersion}"
            - RepoURI:
                Fn::ImportValue: !Sub "babel-infrastructure-${Environment}-internauta-repo-uri"
          Essential: true
          #Cpu: 10
          #Memory: 256
          #TODO MemoryReservation: 480
          PortMappings:
            - ContainerPort: !FindInMap [Settings, global, ContainerPort] # HostPost & Protocol sono opzionali
          Environment:
            - Name: SPRING_DATASOURCE_URL #jdbc:postgresql://host.docker.internal:5432/internauta?stringtype=unspecified
              Value: !Sub
                - "jdbc:postgresql://${DBHost}:5432/internauta?stringtype=unspecified"
                - DBHost:
                    Fn::ImportValue: !Sub "babel-infrastructure-${Environment}-postgres-primary-endpoint"
            - Name: nextsdr_request_default_azienda-path
              Value:
                Fn::ImportValue: !Sub "babel-infrastructure-${Environment}-redis-primary-endpoint"
            - Name: internauta_cache_redis_host
              Value:
                Fn::ImportValue: !Sub "babel-infrastructure-${Environment}-redis-primary-endpoint"
            - Name: intimus_redis_host
              Value:
                Fn::ImportValue: !Sub "babel-infrastructure-${Environment}-redis-primary-endpoint"
            - Name: shared_data_redis_host
              Value:
                Fn::ImportValue: !Sub "babel-infrastructure-${Environment}-redis-primary-endpoint"
            - Name: masterjobs_redis_host
              Value:
                Fn::ImportValue: !Sub "babel-infrastructure-${Environment}-redis-primary-endpoint"
          Secrets:
            #arn:aws:secretsmanager:region:aws_account_id:secret:secret-name:json-key:version-stage:version-id
            - Name: "SPRING_DATASOURCE_USERNAME"
              ValueFrom: !Sub
                - "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretId}:POSTGRES_USER::"
                - SecretId: !FindInMap [Security, !Ref Environment, SecretId]
            - Name: "SPRING_DATASOURCE_PASSWORD"
              ValueFrom: !Sub
                - "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretId}:POSTGRES_PSWD::"
                - SecretId: !FindInMap [Security, !Ref Environment, SecretId]
          # MountPoints: []
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: internauta

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - AppLBListenerRule
    Properties:
      # ServiceName: !Ref ComponentName
      Cluster:
        Fn::ImportValue: !Sub "babel-infrastructure-${Environment}-cluster-name"
      LoadBalancers:
        - ContainerName: internauta_service
          ContainerPort: !FindInMap [Settings, global, ContainerPort]
          TargetGroupArn: !Ref ComponentTG
      # Role: !Ref ServiceRole
      TaskDefinition: !Ref TaskDefinition
      HealthCheckGracePeriodSeconds: 10
      # LaunchType: FARGATE
      # CapacityProviderStrategy:
      #   - CapacityProvider: !Ref CapacityProvider
      #     Base: 1
      #     Weight: 1
      # PlacementConstraints:
      #   - PlacementConstraint
      # PlacementStrategies:
      #   - PlacementStrategy
      # PlatformVersion: String
      PropagateTags: SERVICE
      DeploymentController:
        Type: ECS # CODE_DEPLOY | ECS | EXTERNAL
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: !If [IsProd, true, false]
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 100

  ComponentTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 2
      Port: !FindInMap [Settings, global, ContainerPort]
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId:
        Fn::ImportValue: !Sub "babel-infrastructure-${Environment}-vpc-id"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"

  AppLBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ComponentTG
      Conditions:
        - Field: path-pattern
          Values:
            - "/internauta-api*"
      ListenerArn:
        Fn::ImportValue: !Sub "babel-infrastructure-${Environment}-lb-https-listener"
      Priority: !FindInMap [Settings, global, ServicePriority]

  TaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${ProjectName}/${Environment}/${ComponentName}"
      RetentionInDays: 30

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}_${Environment}_${ComponentName}_task-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudwatch:PutMetricData"
                  - "ecs:DescribeTasks"
                Resource: "*"

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}_${Environment}_${ComponentName}_execution-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "kms:Decrypt"
                Resource: "*"

  AutoScalingRole:
    Type: AWS::IAM::Role
    Condition: EnableAutoscaling
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  [
                    "application-autoscaling:*",
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:PutMetricAlarm",
                    "ecs:DescribeServices",
                    "ecs:UpdateService",
                  ]
                Resource: "*"

  Target:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: EnableAutoscaling
    Properties:
      MaxCapacity: !FindInMap [Autoscaling, !Ref Environment, MaxCapacity]
      MinCapacity: !FindInMap [Autoscaling, !Ref Environment, MinCapacity]
      ResourceId: !Sub
        - "service/${ClusterName}/${Service.Name}"
        - ClusterName:
            Fn::ImportValue: !Sub "babel-infrastructure-${Environment}-cluster-name"
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ScaleTarget:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: EnableAutoscaling
    Properties:
      PolicyName: Internauta_TargerTracking_CPU_60
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref Target
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 60.0
        ScaleInCooldown: 120
        ScaleOutCooldown: 30
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
